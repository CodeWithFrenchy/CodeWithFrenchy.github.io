<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://codewithfrenchy.github.io//</id><title>CodeWithFrenchy</title><subtitle>Mon blog touchant divers sujets de l'informatique.</subtitle> <updated>2025-10-29T15:15:36-04:00</updated> <author> <name>Alexis Garon-Michaud</name> <uri>https://codewithfrenchy.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://codewithfrenchy.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="fr-FR" href="https://codewithfrenchy.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Alexis Garon-Michaud </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Concevoir et maintenir des applications microservices performantes en .NET</title><link href="https://codewithfrenchy.github.io//posts/concevoir-maintenir-application-performante-dotnet/" rel="alternate" type="text/html" title="Concevoir et maintenir des applications microservices performantes en .NET" /><published>2025-10-20T19:00:00-04:00</published> <updated>2025-10-20T19:00:00-04:00</updated> <id>https://codewithfrenchy.github.io//posts/concevoir-maintenir-application-performante-dotnet/</id> <content src="https://codewithfrenchy.github.io//posts/concevoir-maintenir-application-performante-dotnet/" /> <author> <name>Alexis Garon-Michaud</name> </author> <category term="architecture" /> <summary> La performance logicielle ne doit pas être une réflexion après coup : elle se conçoit dès le départ et se cultive tout au long de la vie du système. Dans cet article, nous explorons comment s’outiller pour identifier les problèmes de performance et les bonnes pratiques pour bâtir une application scalable, optimisée et résiliente. Nous aborderons la conception axée sur la scalabilité, l’améliora... </summary> </entry> <entry><title>.NET 10 - Nouveautés, Performances et Support Prolongé</title><link href="https://codewithfrenchy.github.io//posts/dotnet10/" rel="alternate" type="text/html" title=".NET 10 - Nouveautés, Performances et Support Prolongé" /><published>2025-10-06T19:00:00-04:00</published> <updated>2025-10-06T19:00:00-04:00</updated> <id>https://codewithfrenchy.github.io//posts/dotnet10/</id> <content src="https://codewithfrenchy.github.io//posts/dotnet10/" /> <author> <name>Alexis Garon-Michaud</name> </author> <summary> En novembre 2025, Microsoft lancera .NET 10, probablement lors de .NET Conf (du 11 au 13 novembre). Cette version s’annonce riche en améliorations de performance et nouvelles fonctionnalités, tout en apportant des changements de support importants. À l’heure où j’écris cet article en fin septembre 2025, .NET 10 est en RC1 (depuis le 9 septembre), et la version finale sera une LTS (Long Term Sup... </summary> </entry> <entry><title>Les design patterns - les bons Legos pour vos applications .NET</title><link href="https://codewithfrenchy.github.io//posts/utilisation-design-patterns/" rel="alternate" type="text/html" title="Les design patterns - les bons Legos pour vos applications .NET" /><published>2025-09-22T10:00:00-04:00</published> <updated>2025-09-22T10:00:00-04:00</updated> <id>https://codewithfrenchy.github.io//posts/utilisation-design-patterns/</id> <content src="https://codewithfrenchy.github.io//posts/utilisation-design-patterns/" /> <author> <name>Alexis Garon-Michaud</name> </author> <category term="architecture" /> <summary> Introduction : Ne réinventez pas la roue, assemblez les Legos En conception logicielle, un design pattern (ou patron de conception) est une solution éprouvée à un problème de conception récurrent. Ce sont en quelque sorte nos briques de Lego à nous, développeurs : plutôt que de tailler chaque pièce dans le bois, on pioche dans la boîte le composant adapté au bon moment. Bien comprendre ces pat... </summary> </entry> <entry><title>Faut-il vraiment adopter une architecture microservices</title><link href="https://codewithfrenchy.github.io//posts/quand-utiliser-architecture-microservices/" rel="alternate" type="text/html" title="Faut-il vraiment adopter une architecture microservices" /><published>2025-09-08T20:00:00-04:00</published> <updated>2025-09-08T20:00:00-04:00</updated> <id>https://codewithfrenchy.github.io//posts/quand-utiliser-architecture-microservices/</id> <content src="https://codewithfrenchy.github.io//posts/quand-utiliser-architecture-microservices/" /> <author> <name>Alexis Garon-Michaud</name> </author> <category term="architecture" /> <summary> Préambule “On part en microservices ou on reste monolithique ?” C’est une des questions les plus posées et les moins bien tranchées du monde logiciel. Une question qui revient à chaque projet un peu d’envergure, et qui déclenche systématiquement les mêmes débats passionnés entre collègues, souvent avec des effets secondaires comme la hausse du débit de voix et des soupirs lourds de sens. ... </summary> </entry> <entry><title>Architecture Vertical Slice dans l’écosystème .NET</title><link href="https://codewithfrenchy.github.io//posts/vertical-slice-architecture/" rel="alternate" type="text/html" title="Architecture Vertical Slice dans l’écosystème .NET" /><published>2025-06-29T20:00:00-04:00</published> <updated>2025-06-29T20:00:00-04:00</updated> <id>https://codewithfrenchy.github.io//posts/vertical-slice-architecture/</id> <content src="https://codewithfrenchy.github.io//posts/vertical-slice-architecture/" /> <author> <name>Alexis Garon-Michaud</name> </author> <category term="architecture" /> <summary> L’architecture Vertical Slice (ou architecture en tranches verticales) est une approche de conception logicielle qui consiste à organiser le code par fonctionnalités verticales plutôt que par couches techniques. Autrement dit, chaque fonctionnalité de l’application est implémentée de bout en bout dans une tranche (un slice) comprenant tous les aspects nécessaires : interface utilisateur, logiqu... </summary> </entry> </feed>
